# 360 Data Admin Dashboard - Project Intelligence

## Project Overview
This is a fully functional Next.js 14.1.0 admin dashboard for "360 Data", a telecommunications services platform. The project uses TypeScript, Tailwind CSS, and shadcn/ui components with a comprehensive feature set for managing users, services, transactions, and system settings.

## Critical Project Patterns

### Component Architecture
- **Layout Pattern**: All pages use `DashboardLayout` wrapper with feature-specific components
- **Modal Pattern**: Reusable modal components with `*-modal.tsx` naming convention
- **Form Pattern**: Controlled components with useState, basic HTML5 validation
- **State Lifting**: Parent components manage state, children receive props and callbacks

### File Organization
```
app/[feature]/page.tsx -> DashboardLayout -> FeatureComponent
components/feature-name.tsx (main component)
components/add-feature-modal.tsx (CRUD modals)
components/ui/ (shadcn/ui components - 50+ available)
```

### Styling System
- **Tailwind CSS**: Utility-first with responsive design (`md:`, `lg:` breakpoints)
- **Color System**: Indigo as primary brand color (indigo-600, indigo-50, etc.)
- **Responsive Pattern**: Mobile-first with `grid-cols-1 md:grid-cols-3` patterns
- **CSS Variables**: Semantic colors in globals.css for theming

### State Management Patterns
- **Local State**: useState for component state, form inputs, modal visibility
- **No Global State**: Each feature manages its own state independently
- **Mock Data**: All data is currently mocked arrays, ready for API integration
- **Form Handling**: Controlled inputs with onChange handlers, form submission with preventDefault

## Key Implementation Details

### Modal Implementation Pattern
```typescript
// Standard modal pattern used throughout
const [isModalOpen, setIsModalOpen] = useState(false)
const modalRef = useRef<HTMLDivElement>(null)

// Click outside to close
useEffect(() => {
  const handleClickOutside = (event: MouseEvent) => {
    if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
      onClose()
    }
  }
  if (isOpen) {
    document.addEventListener("mousedown", handleClickOutside)
  }
  return () => document.removeEventListener("mousedown", handleClickOutside)
}, [isOpen, onClose])
```

### Form Submission Pattern
```typescript
// Standard form handling pattern
const handleSubmit = (e: React.FormEvent) => {
  e.preventDefault()
  onSubmit(formData)
  // Reset form
  setFormData(initialState)
  onClose()
}
```

### Responsive Sidebar Pattern
```typescript
// Mobile responsive sidebar with overlay
const [sidebarOpen, setSidebarOpen] = useState(false)
className={`fixed inset-y-0 left-0 z-40 w-64 bg-white transform transition-transform duration-300 ease-in-out md:translate-x-0 md:static md:h-screen ${
  sidebarOpen ? "translate-x-0" : "-translate-x-full"
}`}
```

## Feature-Specific Patterns

### User Management
- **Three User Types**: System Users (admin roles), Subscribers (end users), Credit Users (wallet users)
- **CRUD Operations**: Add, view, edit capabilities with modal-based workflows
- **Role Management**: Super Admin, Admin roles for system users

### Service Management
- **Airtime Discounts**: Network-specific (MTN, Glo, Airtel, 9mobile) with user/agent/vendor pricing
- **Data Plans**: Comprehensive plan management with data types (Gifting, SME, Corporate, Direct)
- **Pricing Tiers**: Different prices for Users, Agents, Vendors

### Settings Management
- **API Settings**: Paystack, Monnify, General API configurations
- **Site Settings**: General settings, contact details
- **Form Validation**: Basic HTML5 validation with required fields

## Technology Stack Specifics

### Dependencies
- **Next.js 14.1.0**: App Router, Server Components, TypeScript
- **React 18.2.0**: Latest stable with concurrent features
- **Tailwind CSS 3.4.17**: Utility-first styling
- **shadcn/ui**: Complete component library (50+ components)
- **Lucide React 0.454.0**: Icon library
- **React Hook Form 7.54.1**: Available but not fully implemented
- **Zod 3.24.1**: Available for validation (not implemented)

### Build Configuration
- **PostCSS**: Configured with Tailwind and Autoprefixer
- **TypeScript**: Errors ignored in builds for faster development
- **ESLint**: Disabled during builds for speed
- **PNPM**: Package manager

## Current Status & Next Steps

### What's Working âœ…
- Complete UI with all features functional
- Responsive design across all breakpoints
- Professional styling with consistent design system
- All CRUD operations with modal workflows
- Mock data for all features

### Immediate Priorities
1. **API Integration**: Replace mock data with real backend calls
2. **Form Validation**: Implement Zod schemas with React Hook Form
3. **Error Handling**: Add Error Boundaries and loading states
4. **Authentication**: Implement user auth and role-based access

### Technical Debt
- Basic HTML5 validation instead of Zod schemas
- No error boundaries or comprehensive error handling
- Missing loading states for async operations
- All data is mocked, no real API integration

## Development Guidelines

### When Adding New Features
1. Follow the established component patterns
2. Use the modal pattern for CRUD operations
3. Implement responsive design with mobile-first approach
4. Use shadcn/ui components for consistency
5. Follow the file naming conventions

### When Implementing APIs
1. Replace mock data arrays with API calls
2. Add loading states with proper UI feedback
3. Implement error handling with user-friendly messages
4. Use React Query/TanStack Query for data fetching

### When Adding Forms
1. Use controlled components with useState
2. Implement proper validation (move to Zod + React Hook Form)
3. Provide clear feedback on submission
4. Follow the established form submission pattern

## Performance Considerations
- Tailwind content paths optimized for fast compilation
- Next.js Image component used for optimization
- Tree-shakeable icons with Lucide React
- CSS variables for efficient theming

## Security Notes
- No authentication currently implemented
- All routes are public
- No API security measures in place
- Ready for role-based access control implementation

This project has a solid foundation with excellent UI/UX and is ready for backend integration and enhanced functionality. 